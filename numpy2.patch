--- a/nptyping/typing_.py
+++ b/nptyping/typing_.py
@@ -22,6 +22,8 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 """
 
+# following copied from: https://github.com/ramonhagenaars/nptyping/issues/125
+# --------------------------------------------------------------------------
 try:
     from typing import (  # type: ignore[attr-defined,misc] # pylint: disable=unused-import
         Literal,
@@ -48,10 +50,10 @@ ShapeTuple: TypeAlias = Tuple[int, ...]
 
 Number = np.number
 Bool = np.bool_
-Bool8 = np.bool8
+Bool8 = np.bool_
 Obj = np.object_  # Obj is a common abbreviation and should be usable.
 Object = np.object_
-Object0 = np.object0
+Object0 = np.object_
 Datetime64 = np.datetime64
 Integer = np.integer
 SignedInteger = np.signedinteger
@@ -63,7 +65,7 @@ Byte = np.byte
 Short = np.short
 IntC = np.intc
 IntP = np.intp
-Int0 = np.int0
+Int0 = np.int8
 Int = np.integer  # Int should translate to the "generic" int type.
 Int_ = np.int_
 LongLong = np.longlong
@@ -77,7 +79,7 @@ UByte = np.ubyte
 UShort = np.ushort
 UIntC = np.uintc
 UIntP = np.uintp
-UInt0 = np.uint0
+UInt0 = np.uint
 UInt = np.uint
 ULongLong = np.ulonglong
 Inexact = np.inexact
@@ -88,30 +90,30 @@ Float64 = np.float64
 Half = np.half
 Single = np.single
 Double = np.double
-Float = np.float_
+Float = np.float64
 LongDouble = np.longdouble
-LongFloat = np.longfloat
+LongFloat = np.longdouble
 ComplexFloating = np.complexfloating
 Complex64 = np.complex64
 Complex128 = np.complex128
 CSingle = np.csingle
-SingleComplex = np.singlecomplex
+SingleComplex = np.complex64
 CDouble = np.cdouble
-Complex = np.complex_
-CFloat = np.cfloat
+Complex = np.complex128
+CFloat = np.complex128
 CLongDouble = np.clongdouble
-CLongFloat = np.clongfloat
-LongComplex = np.longcomplex
+CLongFloat = np.clongdouble
+LongComplex = np.clongdouble
 Flexible = np.flexible
 Void = np.void
-Void0 = np.void0
+Void0 = np.void
 Character = np.character
 Bytes = np.bytes_
 Str = np.str_
-String = np.string_
-Bytes0 = np.bytes0
-Unicode = np.unicode_
-Str0 = np.str0
+String = np.bytes_
+Bytes0 = np.bytes_
+Unicode = np.str_
+Str0 = np.str_
 
 dtypes = [
     (Number, "Number"),
--- nptyping-2.5.0/tests/test_ndarray.py~	2025-03-29 15:07:54.000000000 +0100
+++ nptyping-2.5.0/tests/test_ndarray.py	2025-03-29 15:08:53.299981730 +0100
@@ -264,7 +264,7 @@
 
     def test_types_with_numpy_dtypes(self):
         self.assertIsInstance(np.array([42]), NDArray[Any, np.int_])
-        self.assertIsInstance(np.array([42.0]), NDArray[Any, np.float_])
+        self.assertIsInstance(np.array([42.0]), NDArray[Any, np.float64])
         self.assertIsInstance(np.array([np.uint8(42)]), NDArray[Any, np.uint8])
         self.assertIsInstance(np.array([True]), NDArray[Any, np.bool_])
 
--- nptyping-2.5.0/dependencies/requirements.txt~	2025-03-29 23:15:09.000000000 +0100
+++ nptyping-2.5.0/dependencies/requirements.txt	2025-03-29 23:15:36.066648406 +0100
@@ -1,3 +1,2 @@
-numpy==1.21.5; python_version<'3.8'
-numpy>=1.20.0,<2.0.0; python_version>='3.8'
+numpy>=2.0.0; python_version>='3.8'
 typing_extensions>=4.0.0,<5.0.0; python_version<'3.10'
